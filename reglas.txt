===========================================
REGLAS DE CURSOR Y MCP CONFIGURADOS
===========================================

## üìã REGLAS DEL USUARIO

### Reglas Generales:
- **Saludo**: Empezar cada chat con "Hola CompadreCris"
- **Formato de N√∫meros**: Usar coma como separador decimal (formato local del pa√≠s)
- **Directorio de Salida**: Colocar todos los outputs de scripts en directorio 'output'

## üß† MEMORIAS DEL AGENTE

### Preferencias de Formato:
- **Separador Decimal**: Preferencia por usar coma (,) en lugar de punto (.) en datos num√©ricos
- **Directorio de Salida**: Todos los outputs de scripts deben ir en directorio llamado 'output'

### Configuraci√≥n de Jira:
- **Transiciones de Avance**: Usar transici√≥n ID 31 para avanzar tareas
- **Transiciones de Retroceso**: Usar transici√≥n ID 41 para retroceder tareas

### Flujo de Estados en Jira:

#### 1. Estado Inicial: BACKLOG
- Transici√≥n a "Listo Para Hacer": ID 11

#### 2. LISTO PARA HACER
- Avanzar a "En Pleno Desarrollo": ID 61

#### 3. EN PLENO DESARROLLO
- Avanzar a "Desarrollado": ID 21
- Retroceder a "Listo Para Hacer": ID 51

#### 4. DESARROLLADO
- Avanzar a "Listo para QA": ID 31
- Retroceder a "En Pleno Desarrollo": ID 51

#### 5. LISTO PARA QA
- Avanzar a "En QA": ID 71
- Retroceder a "Desarrollado": ID 41

#### 6. EN QA
- Avanzar a siguiente estado: ID 91
- Retroceder a "En Pleno Desarrollo": ID 81

#### 7. Estado Final: LISTO
- Llegar a "Listo": ID 111

#### Estado Especial - BLOQUEADO:
- **Bloquear tarea** (desde cualquier estado): ID 2
- **Desbloquear tarea**: ID 3

#### Notas Importantes:
- El flujo normal sigue la secuencia: Backlog ‚Üí Listo Para Hacer ‚Üí En Pleno Desarrollo ‚Üí Desarrollado ‚Üí Listo para QA ‚Üí En QA ‚Üí Listo
- Se puede bloquear una tarea desde cualquier estado usando ID 2
- Se puede desbloquear una tarea usando ID 3, regresando al estado anterior
- Existen transiciones de retroceso para permitir correcciones o ajustes en el flujo

### Problemas Resueltos:
- **Login del Admin**: El problema de login del admin ha sido resuelto
- **Base de Datos**: Estaba configurada correctamente
- **Contrase√±a**: Se actualiz√≥ de "password" a "admin123"
- **Hash**: Se usa el hash $2y$12$oV8r2nwLdyXww/IKrUlCf.vuygMibugaUvp4VxeXVwDBmWEJ59OC6
- **Credenciales Correctas**: username='admin', password='admin123'

## üîß MCP (MODEL CONTEXT PROTOCOL) CONFIGURADOS

### Servidores MCP Disponibles:

#### 1. Jira MCP Server
- **Funciones Disponibles**:
  - Listar tickets asignados
  - Obtener detalles de tickets espec√≠ficos
  - Obtener comentarios de tickets
  - Crear nuevos tickets
  - Agregar comentarios a tickets
  - Actualizar estado de tickets
  - Buscar tickets en proyectos espec√≠ficos

#### 2. GitHub MCP Server
- **Funciones Disponibles**:
  - B√∫squeda de repositorios
  - B√∫squeda de c√≥digo
  - B√∫squeda de usuarios
  - Gesti√≥n de issues y pull requests
  - Creaci√≥n y actualizaci√≥n de repositorios
  - Gesti√≥n de archivos y contenido
  - Gesti√≥n de branches y commits
  - Gesti√≥n de tags y releases

### Funcionalidades MCP por Categor√≠a:

#### Gesti√≥n de Proyectos:
- Crear, actualizar y gestionar repositorios
- Fork de repositorios
- Gesti√≥n de branches y tags
- Push de m√∫ltiples archivos

#### Gesti√≥n de Issues:
- Crear, actualizar y cerrar issues
- Agregar comentarios
- Obtener detalles y comentarios
- B√∫squeda avanzada de issues

#### Gesti√≥n de Pull Requests:
- Crear y actualizar PRs
- Obtener detalles y archivos modificados
- Agregar comentarios de revisi√≥n
- Merge de PRs

#### Gesti√≥n de Jira:
- Flujo completo de tickets
- Transiciones de estado
- Comentarios y actualizaciones
- B√∫squeda y filtrado

## üìã REGLAS DE USO DE MCP

### Jira:
- Usar IDs de transici√≥n correctos seg√∫n el flujo de estados
- Seguir el patr√≥n de avance/retroceso establecido
- Mantener consistencia en la gesti√≥n de tickets

### GitHub:
- Usar convenciones de nomenclatura est√°ndar
- Mantener historial de commits limpio
- Seguir flujos de trabajo establecidos

### General:
- Verificar permisos antes de realizar operaciones
- Manejar errores apropiadamente
- Documentar cambios importantes

## ‚öôÔ∏è CONFIGURACIONES ESPEC√çFICAS DE MCP

### Jira MCP Server Configuration:
- **Endpoint**: Configurado para conectar con instancia de Jira
- **Autenticaci√≥n**: Basada en credenciales de usuario
- **Proyectos**: Acceso a proyectos configurados en la instancia
- **Workflows**: Flujo de estados personalizado con IDs espec√≠ficos
- **Transiciones Disponibles**:
  - ID 2: Bloquear tarea (desde cualquier estado)
  - ID 3: Desbloquear tarea
  - ID 11: BACKLOG ‚Üí Listo Para Hacer
  - ID 21: En Pleno Desarrollo ‚Üí Desarrollado
  - ID 31: Desarrollado ‚Üí Listo para QA
  - ID 41: Listo para QA ‚Üí Desarrollado (retroceso)
  - ID 51: Desarrollado ‚Üí En Pleno Desarrollo (retroceso)
  - ID 61: Listo Para Hacer ‚Üí En Pleno Desarrollo
  - ID 71: Listo para QA ‚Üí En QA
  - ID 81: En QA ‚Üí En Pleno Desarrollo (retroceso)
  - ID 91: En QA ‚Üí siguiente estado
  - ID 111: Llegar a estado final LISTO

### GitHub MCP Server Configuration:
- **Endpoint**: Conectado a GitHub API v3
- **Autenticaci√≥n**: Token de acceso personal (Personal Access Token)
- **Scope**: Acceso completo a repositorios, issues, pull requests
- **Rate Limiting**: Respetar l√≠mites de la API de GitHub
- **Webhooks**: Configurado para eventos de repositorio
- **Branch Protection**: Reglas de protecci√≥n para branches principales
- **Code Review**: Sistema de revisi√≥n de c√≥digo configurado

### Configuraciones de Seguridad:
- **Tokens**: Rotaci√≥n autom√°tica de tokens de acceso
- **Permisos**: Principio de menor privilegio aplicado
- **Auditor√≠a**: Logs de todas las operaciones MCP
- **Cifrado**: Comunicaci√≥n encriptada entre cliente y servidores MCP

### Configuraciones de Rendimiento:
- **Cache**: Cache local para operaciones frecuentes
- **Concurrencia**: L√≠mites de operaciones simult√°neas
- **Timeout**: Configuraci√≥n de timeouts para operaciones largas
- **Retry Logic**: Reintentos autom√°ticos para operaciones fallidas

### Integraci√≥n con Cursor:
- **Auto-completado**: Sugerencias inteligentes para comandos MCP
- **Shortcuts**: Atajos de teclado para operaciones comunes
- **Context Awareness**: Conocimiento del contexto del proyecto actual
- **Error Handling**: Manejo elegante de errores de MCP en la UI

===========================================
FIN DEL DOCUMENTO
===========================================
